#!/bin/bash
#set -x
if [ -z "$REPO_DIR" ]; then
    echo "can't $0, no REPO_DIR repo home directory found in the environment"
    exit 1;
fi
if [ -z "$TMP" ]; then
    echo "can't $0, no tmp directory found in the environment"
    exit 1;
fi

# don't want the pull to clobber this, and gosh, what if there are multiple pulls
# simultaneously?  this is a bit of a hack but good enough for now ..
TimeStamp="$TMP"/git_pull_timestamp_"$(od -A n -t x -N 8 /dev/urandom |tr -d ' ')"
touch "$TimeStamp"

# would be better to make this repo specific so we don't pull other submodules than the
# repo ..  or do we want the latest in the other submodules also?
pushd "$REPO_DIR" > /dev/null

  git pull --recurse-submodules || echo "git pull failed"

  # make a file that looks like a newly pulled executable for testing purposes
  #  touch temp
  #  chmod +x temp

  find . \
       -newer "$TimeStamp" \
       -not -path "./.git/*" \
       -not -type d \
       -executable \
       -execdir echo "Pulled file is executable, removing x flag: {}" \; \
       -execdir chmod -x {} \;

  find . \
       -newer "$TimeStamp" \
       -not -type d \
       -not -name "\.git" \
       -not -path "./.git/*" \
       -execdir echo "New file: {}" \;

  find . \
       -newer "$TimeStamp" \
       -not -path "./.git/*" \
       -path "./tmp/*" \
       -execdir echo "Error, this file was pulled into a tmp directory: {}" \; 

  if [ -d env ]; then
    find env \
         -newer "$TimeStamp" \
         -execdir echo "Error, this file was pulled into the env directory: {}" \; 
  fi

  find . \
       -newer "$TimeStamp" \
       -not -path "./.git/*" \
       -not -name "\.git" \
       -name "\.*" \
       -execdir echo "Error, hidden file was pulled: {}" \; 

  if [ .gitignore -nt "$TimeStamp" ]; then
      echo "Warning, .gitignore was modified."
  fi

  rm "$TimeStamp"

popd > /dev/null
#set +x
